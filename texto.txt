int comparadorCaractere(const void *px, const void *py) {
    char x, y;
    x = *(char *)px; // Convers„o e derreferenciaÁ„o
    y = *(char *)py; // Convers„o e derreferenciaÁ„o

    //return x - y; // OrdenaÁ„o Crescente
    return y - x; // OrdenaÁ„o Decrescente
    /* POSSÕVEIS RETORNOS DA FUN«√O:
     - Se negativo: px antes de py
     - Se 0: os dois s„o iguais
     - Se positivo: py antes de px
    */
}

int comparadorInteiro(const void *px, const void *py) {
    int x, y;
    x = *(int *)px; // Convers„o e derreferenciaÁ„o
    y = *(int *)py; // Convers„o e derreferenciaÁ„o

    return x - y; // OrdenaÁ„o Crescente
    //return y - x; // OrdenaÁ„o Decrescente
    /* POSSÕVEIS RETORNOS DA FUN«√O:
     - Se negativo: px antes de py
     - Se 0: os dois s„o iguais
     - Se positivo: py antes de px
    */
}

int main() {
    int vet[TAM];
    preencher_vetor(vet, TAM);
    puts("VETOR ORIGINAL:");
    imprimir_vetor(vet, TAM);

    /*OrdenaÁ„o com Heap Sort*/
    //heap_sort(vet, TAM);

    
    /*OrdenaÁ„o com qsort()*/
    //qsort(vet, TAM, sizeof(char), comparadorCaractere);
    //qsort(vet, TAM, sizeof(int), comparadorInteiro); // Se fosse um vetor de inteiros (FunÁ„o comparador diferente)

    puts("\nVETOR ORDENADO:");
    imprimir_vetor(vet, TAM);
    return 0;
}
