#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TAM 50

/*
    3 algoritmos de ordenaÁ„o b·sicos
    ordenando de forma descrecente
    vetor aleatÛrios de caracteres
*/

void preencher_vetor(char vet[], int tam) {
    srand(time(NULL));
    int i;
    for (i = 0; i < tam; i++) {
        vet[i] = (char) (33 + rand() % 94);
    }
}

void imprimir_vetor(char vet[], int tam) {
    int i;
    for (i = 0; i < tam; i++) {
        printf("%c\t", vet[i]);
    }
}

void bubble_sort(char vet[], int tam) {
    int i, j;
    char aux;
    for (i = 0; i < tam - 1; i++) {
        // PERCORRE O VETOR TODO, ENXUGANDO A CADA VEZ
        for (j = 0; j < tam - 1 - i; j++) {
            // VERIFICA QUEM … MAIOR
            if (vet[j] < vet[j + 1]) {
                // TROCA
                aux = vet[j];
                vet[j] = vet[j + 1];
                vet[j + 1] = aux;
            }
        }
    }

}

void insertion_sort(char vet[], int tam) {
    int i, j;
    char aux;
    // AVAN«A PARA DIREITA E SELECIONA N⁄MERO
    for (i = 1; i < tam; i++) {
        aux = vet[i];
        // PERCORRE O SUBVETOR DA ESQUERDA
        for (j = i; j > 0 &&  aux > vet[j - 1]; j--)  {
            // EMPURRA OS ELEMENTOS
            vet[j] = vet[j - 1];

        }
        // COLOCA O ELEMENTO NA POSI«√O DEVIDA
        vet[j] = aux;
    }
}

void selection_sort(char vet[], int tam) {
    int i, j;
    char aux;
    int menor;
    // PERCORRE O VETOR PARA A DIREITA
    for (i = 0; i < tam - 1; i++) {
        menor = i;
        // PERCORRE O VETOR ENXUGADO PARA A DIREITA
        for (j = i + 1; j <= tam - 1; j++) {
            if (vet[j] > vet[menor]) {
                // GUARDA A POSI«√O DO MENOR ELEMENTO
                menor = j;
            }
        }
        // TROCA O MENOR ELEMENTO COM O PRIMEIRO
        if (i != menor) {
            aux = vet[i];
            vet[i] = vet[menor];
            vet[menor] = aux;
        }
    }
}

int main()
{
    char vet[TAM], vet2[TAM], vet3[TAM];
    preencher_vetor(vet, TAM);
    puts("Vetor original:");
    imprimir_vetor(vet, TAM);
    bubble_sort(vet, TAM);
    puts("Vetor ordenado:");
    imprimir_vetor(vet, TAM);
    // ============================== //
    preencher_vetor(vet2, TAM);
    puts("Vetor original:");
    imprimir_vetor(vet2, TAM);
    insertion_sort(vet2, TAM);
    puts("Vetor ordenado:");
    imprimir_vetor(vet2, TAM);
    // ============================== //
    preencher_vetor(vet3, TAM);
    puts("Vetor original:");
    imprimir_vetor(vet3, TAM);
    selection_sort(vet3, TAM);
    puts("Vetor ordenado:");
    imprimir_vetor(vet3, TAM);
    return 0;
}
