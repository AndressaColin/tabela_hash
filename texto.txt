#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//DefiniÁ„o do tipo Hash
struct hash{
    int quantidade, tamanho;
    int **itens;
};

typedef struct hash Hash;

Hash* criaHash(int tamanho);
void liberaHash(Hash* ha);
int insereHash_SemColisao(Hash* ha, int elemento);
int buscaHash_SemColisao(Hash* ha, int mat, int *elemento);


Hash* criaHash(int tamanho){
    Hash* ha = (Hash*) malloc(sizeof(Hash));
    if(ha != NULL){
        int i;
        ha->tamanho = tamanho;
        ha->itens = (int**) malloc(tamanho * sizeof(int*));
        if(ha->itens == NULL){
            free(ha);
            return NULL;
        }
        ha->quantidade = 0;
        for(i=0; i < ha->tamanho; i++)
            ha->itens[i] = NULL;
    }
    return ha;
}

void liberaHash(Hash* ha){
    if(ha != NULL){
        int i;
        for(i=0; i < ha->tamanho; i++){
            if(ha->itens[i] != NULL)
                free(ha->itens[i]);
        }
        free(ha->itens);
        free(ha);
    }
}

//Hash Divisao
//pos = chaveDivisao(chave, tamanho)
int chaveDivisao(int chave, int tamanho){
    return (chave & 0x7FFFFFFF) % tamanho;
}

//==============================================
// Insere e busca sem tratamento de colis„o
//==============================================
int insereHash_SemColisao(Hash* ha, int elemento){
    if(ha == NULL || ha->quantidade == ha->tamanho)
        return 0;

    int chave = elemento;

    int pos = chaveDivisao(chave, ha->tamanho);
    int* novo;
    novo = (int*) malloc(sizeof(int));
    if(novo == NULL)
        return 0;
    *novo = elemento;
    ha->itens[pos] = novo;
    ha->quantidade++;
    return 1;
}

int buscaHash_SemColisao(Hash* ha, int mat, int *elemento){
    if(ha == NULL)
        return 0;

    int pos = chaveDivisao(mat, ha->tamanho);
    if(ha->itens[pos] == NULL)
        return 0;
    *elemento = *(ha->itens[pos]);
    return 1;
}

int main(){
    int tamanho = 1024;
    Hash *tabela = criaHash(tamanho);

    int elementoBusca, elementos [4] = {12352, 7894, 3451, 5293}; //64, 726, 379, 173

    int i;

    printf("Inserindo Elementos\n");

    for(i=0; i < 4; i++) {
        printf("%d\n", elementos[i]);
        insereHash_SemColisao(tabela, elementos[i]);
    }

    printf("Elementos Buscados\n");

    buscaHash_SemColisao(tabela, 12352, &elementoBusca);
    printf("%d\n", elementoBusca);

    buscaHash_SemColisao(tabela, 3451, &elementoBusca);
    printf("%d\n", elementoBusca);

    buscaHash_SemColisao(tabela, 5293, &elementoBusca);
    printf("%d\n", elementoBusca);

    liberaHash(tabela);

    return 0;
}
